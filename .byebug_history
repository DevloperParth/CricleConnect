c
assigns(:stories).ids
c
assigns(:stories).ids
assigns(:stories)
c
response.status
response.body
c
response.body
get :index
login_user
response.body
c
response.status
response.body
get :index
sign_in(user)
user.confirm
user.confirm!
 @request.env["devise.mapping"] = Devise.mappings[:user]
response.body
get :index
controller.current_user
sign_in(user)
c
controller.current_user
sign_in(user)
controller.current_user
login_as(user, scope: :user)
Warden.test_mode!
controller.current_user
sign_in(user)
controller.current_user
c
c\
controller.current_user
controller
sign_in(user)
user.id
response.body
response.status
response
get :index
sign_in(user)
c
response.body
c
response.body
c
assigns(:posts)
Post.all
FactoryBot.create(:post)
assigns(:posts)
c
sign_in FactoryBot.create(:user)
FactoryBot.create(:user)
c
post2 = FactoryBot.create(:post)
n
post1 = FactoryBot.create(:post)
expect(assigns(:posts)).to eq([post1, post2])
n
post2 = FactoryBot.create(:post)
n
FactoryBot.create(:post)
post
id
post_id
c
user
continue
FactoryBot.attributes_for(:like)
like: FactoryBot.attributes_for(:like)
FactoryBot.attributes_for(:like)
like
c
continue
@likes.post.count
@likes.post
like.post
post.likes
post
continue
post
c
params
params: {like:{post_id: post.id}}
c
params[:user_id]
c
params[:expires_at]
params[:expired_at]
params[:content]
params[:content
c
params[:user_id]
params[user_id]
c
params[:user_id]
params[:content]
c
params[:user_id]
params[:content]
params
c
params
params[:search]
c
params[:post_id]
params
c
current_user.like?(1)
current_user.likes?(1)
current_user.likes?
c
params[:post_id]
c
params[:post_id]
params
c
params[:post_id]
params
c
params[:comment]
params
c
params[:id]
params
c
params[:user_id]
params[:post_id]
params
params[:comment]
params
c
params[:comment]
params[:comments]
params
c
params[:comments]
params[:users_id]
params[:post_id]
params
c
params
c
params
c
params
c
params
c
params
c
current_post.picture
c
post.picture
post
@posts
params
c
continue
item
n
item.url
continue
item
continue
item.picture
continue
@posts.picture.count
@posts.picture.url
@posts.picture
  c
@posts.picture
@posts
 @posts = Post.all
c
params
params[:add_text]
params[:picture]
params
continue
self.confirmed?
continue
self.confirmed?
continue
if self.confirmed? UserMailer.welcome_email(self).deliver_later
self
self.confirmed?
